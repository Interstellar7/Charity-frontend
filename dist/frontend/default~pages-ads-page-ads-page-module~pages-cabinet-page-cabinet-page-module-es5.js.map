{"version":3,"sources":["webpack:///node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/tree.js","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/progress-bar.js","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/tree.js"],"names":["BaseTreeControl","expansionModel","dataNode","toggle","select","deselect","isSelected","collapseDescendants","expandDescendants","clear","toBeProcessed","push","getDescendants","FlatTreeControl","getLevel","isExpandable","startIndex","dataNodes","indexOf","results","i","length","NestedTreeControl","getChildren","allNodes","reduce","accumulator","descendants","_getDescendants","splice","childrenNodes","Array","isArray","forEach","child","pipe","Boolean","subscribe","children","TreeControl","CDK_TREE_NODE_OUTLET_NODE","CdkTreeNodeOutlet","viewContainer","_node","ɵfac","CdkTreeNodeOutlet_Factory","t","ɵdir","type","selectors","ctorParameters","undefined","decorators","args","selector","CdkTreeNodeOutletContext","data","$implicit","CdkTreeNodeDef","template","CdkTreeNodeDef_Factory","inputs","when","getTreeNoValidDataSourceError","Error","getTreeMultipleDefaultNodeDefsError","getTreeMissingMatchingNodeDefError","getTreeControlMissingError","getTreeControlFunctionsMissingError","CdkTree","_differs","_changeDetectorRef","_onDestroy","_levels","Map","viewChange","start","end","Number","MAX_VALUE","_dataDiffer","find","create","trackBy","treeControl","_nodeOutlet","next","complete","_dataSource","disconnect","dataSource","_dataSubscription","unsubscribe","defaultNodeDefs","_nodeDefs","filter","def","_defaultNodeDef","_observeRenderChanges","dataStream","connect","renderNodeChanges","dataDiffer","parentData","changes","diff","forEachOperation","item","adjustedPreviousIndex","currentIndex","previousIndex","insertNode","remove","view","get","move","detectChanges","first","nodeDef","nodeData","index","node","_getNodeDef","context","level","has","set","container","createEmbeddedView","CdkTreeNode","mostRecentTreeNode","_switchDataSource","CdkTree_Factory","ɵcmp","contentQueries","CdkTree_ContentQueries","rf","ctx","dirIndex","_t","viewQuery","CdkTree_Query","hostAttrs","exportAs","decls","vars","consts","CdkTree_Template","directives","encapsulation","propDecorators","host","None","changeDetection","Default","_elementRef","_tree","_destroyed","_dataChanges","role","nativeElement","focus","_data","_setRoleFromChildren","value","_setRoleFromData","isExpanded","CdkTreeNode_Factory","hostVars","hostBindings","CdkTreeNode_HostBindings","CdkNestedTreeNode","updateChildrenNodes","result","nodeOutlet","_clear","outlet","_getNodeOutlet","_children","outlets","CdkNestedTreeNode_Factory","CdkNestedTreeNode_ContentQueries","CdkNestedTreeNode_HostBindings","features","provide","useExisting","providers","cssUnitPattern","CdkTreeNodePadding","_treeNode","_renderer","_element","_dir","indentUnits","_indent","_setPadding","change","nodeLevel","_level","forceChange","padding","_paddingIndent","_currentPadding","element","paddingProp","resetProp","setStyle","indent","units","parts","split","CdkTreeNodePadding_Factory","CdkTreeNodeToggle","_recursive","event","recursive","toggleDescendants","stopPropagation","CdkTreeNodeToggle_Factory","CdkTreeNodeToggle_HostBindings","CdkTreeNodeToggle_click_HostBindingHandler","$event","_toggle","EXPORTED_DECLARATIONS","CdkTreeModule","ɵmod","ɵinj","factory","CdkTreeModule_Factory","ngJitMode","declarations","exports","_c0","ProgressAnimationEnd","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION","providedIn","MAT_PROGRESS_BAR_LOCATION_FACTORY","MatProgressBarLocation","_document","_location","location","getPathname","pathname","search","progressbarId","MatProgressBar","_ngZone","_animationMode","_isNoopAnimation","_value","_bufferValue","animationEnd","_animationEndSubscription","EMPTY","mode","path","_rectangleFillValue","scale","transform","bufferValue","runOutsideAngular","_primaryValueBar","e","target","run","v","clamp","MatProgressBar_Factory","MatProgressBar_Query","MatProgressBar_HostBindings","color","outputs","MatProgressBar_Template","_bufferTransform","_primaryTransform","styles","String","OnPush","min","max","Math","MatProgressBarModule","MatProgressBarModule_Factory","imports","_MatTreeNodeMixinBase","MatTreeNode","tabIndex","MatTreeNode_Factory","MatTreeNode_HostBindings","disabled","MatTreeNodeDef","MatTreeNodeDef_Factory","ɵMatTreeNodeDef_BaseFactory","MatNestedTreeNode","_disabled","_tabIndex","MatNestedTreeNode_Factory","MatNestedTreeNode_HostBindings","MatTreeNodePadding","MatTreeNodePadding_Factory","ɵMatTreeNodePadding_BaseFactory","MatTreeNodeOutlet","MatTreeNodeOutlet_Factory","MatTree","MatTree_Factory","ɵMatTree_BaseFactory","MatTree_Query","MatTree_Template","MatTreeNodeToggle","arguments","MatTreeNodeToggle_Factory","ɵMatTreeNodeToggle_BaseFactory","MAT_TREE_DIRECTIVES","MatTreeModule","MatTreeModule_Factory","MatTreeFlattener","transformFunction","resultNodes","parentMap","flatNode","_flattenChildren","childParentMap","slice","_flattenNode","structuredData","nodes","currentExpand","expand","MatTreeFlatDataSource","_treeControl","_treeFlattener","initialData","_flattenedData","_expandedData","collectionViewer","changed","expandFlattenedNodes","flattenNodes","MatTreeNestedDataSource"],"mappings":"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","file":"default~pages-ads-page-ads-page-module~pages-cabinet-page-cabinet-page-module-es5.js","sourcesContent":["import { SelectionModel, isDataSource } from '@angular/cdk/collections';\nimport { isObservable, Subject, BehaviorSubject, of } from 'rxjs';\nimport { take, filter, takeUntil } from 'rxjs/operators';\nimport { InjectionToken, Directive, ViewContainerRef, Inject, Optional, TemplateRef, Component, ViewEncapsulation, ChangeDetectionStrategy, IterableDiffers, ChangeDetectorRef, Input, ViewChild, ContentChildren, ElementRef, Renderer2, HostListener, NgModule } from '@angular/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { FocusMonitor } from '@angular/cdk/a11y';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/control/base-tree-control.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Base tree control. It has basic toggle/expand/collapse operations on a single data node.\n * @abstract\n * @template T\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nclass BaseTreeControl {\n    constructor() {\n        /**\n         * A selection model with multi-selection to track expansion status.\n         */\n        this.expansionModel = new SelectionModel(true);\n    }\n    /**\n     * Toggles one single data node's expanded/collapsed state.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    toggle(dataNode) {\n        this.expansionModel.toggle(dataNode);\n    }\n    /**\n     * Expands one single data node.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    expand(dataNode) {\n        this.expansionModel.select(dataNode);\n    }\n    /**\n     * Collapses one single data node.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    collapse(dataNode) {\n        this.expansionModel.deselect(dataNode);\n    }\n    /**\n     * Whether a given data node is expanded or not. Returns true if the data node is expanded.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    isExpanded(dataNode) {\n        return this.expansionModel.isSelected(dataNode);\n    }\n    /**\n     * Toggles a subtree rooted at `node` recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    toggleDescendants(dataNode) {\n        this.expansionModel.isSelected(dataNode)\n            ? this.collapseDescendants(dataNode)\n            : this.expandDescendants(dataNode);\n    }\n    /**\n     * Collapse all dataNodes in the tree.\n     * @return {?}\n     */\n    collapseAll() {\n        this.expansionModel.clear();\n    }\n    /**\n     * Expands a subtree rooted at given data node recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    expandDescendants(dataNode) {\n        /** @type {?} */\n        let toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.select(...toBeProcessed);\n    }\n    /**\n     * Collapses a subtree rooted at given data node recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    collapseDescendants(dataNode) {\n        /** @type {?} */\n        let toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.deselect(...toBeProcessed);\n    }\n}\nif (false) {\n    /**\n     * Saved data node for `expandAll` action.\n     * @type {?}\n     */\n    BaseTreeControl.prototype.dataNodes;\n    /**\n     * A selection model with multi-selection to track expansion status.\n     * @type {?}\n     */\n    BaseTreeControl.prototype.expansionModel;\n    /**\n     * Get depth of a given data node, return the level number. This is for flat tree node.\n     * @type {?}\n     */\n    BaseTreeControl.prototype.getLevel;\n    /**\n     * Whether the data node is expandable. Returns true if expandable.\n     * This is for flat tree node.\n     * @type {?}\n     */\n    BaseTreeControl.prototype.isExpandable;\n    /**\n     * Gets a stream that emits whenever the given data node's children change.\n     * @type {?}\n     */\n    BaseTreeControl.prototype.getChildren;\n    /**\n     * Gets a list of descendent data nodes of a subtree rooted at given data node recursively.\n     * @abstract\n     * @param {?} dataNode\n     * @return {?}\n     */\n    BaseTreeControl.prototype.getDescendants = function (dataNode) { };\n    /**\n     * Expands all data nodes in the tree.\n     * @abstract\n     * @return {?}\n     */\n    BaseTreeControl.prototype.expandAll = function () { };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/control/flat-tree-control.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Flat tree control. Able to expand/collapse a subtree recursively for flattened tree.\n * @template T\n */\nclass FlatTreeControl extends BaseTreeControl {\n    /**\n     * Construct with flat tree data node functions getLevel and isExpandable.\n     * @param {?} getLevel\n     * @param {?} isExpandable\n     */\n    constructor(getLevel, isExpandable) {\n        super();\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n    }\n    /**\n     * Gets a list of the data node's subtree of descendent data nodes.\n     *\n     * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n     * with correct levels.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    getDescendants(dataNode) {\n        /** @type {?} */\n        const startIndex = this.dataNodes.indexOf(dataNode);\n        /** @type {?} */\n        const results = [];\n        // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n        // The level of descendants of a tree node must be greater than the level of the given\n        // tree node.\n        // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n        // If we reach a node whose level is greater than the level of the tree node, we hit a\n        // sibling of an ancestor.\n        for (let i = startIndex + 1; i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]); i++) {\n            results.push(this.dataNodes[i]);\n        }\n        return results;\n    }\n    /**\n     * Expands all data nodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n     * data nodes of the tree.\n     * @return {?}\n     */\n    expandAll() {\n        this.expansionModel.select(...this.dataNodes);\n    }\n}\nif (false) {\n    /** @type {?} */\n    FlatTreeControl.prototype.getLevel;\n    /** @type {?} */\n    FlatTreeControl.prototype.isExpandable;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/control/nested-tree-control.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type.\n * @template T\n */\nclass NestedTreeControl extends BaseTreeControl {\n    /**\n     * Construct with nested tree function getChildren.\n     * @param {?} getChildren\n     */\n    constructor(getChildren) {\n        super();\n        this.getChildren = getChildren;\n    }\n    /**\n     * Expands all dataNodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n     * data nodes of the tree.\n     * @return {?}\n     */\n    expandAll() {\n        this.expansionModel.clear();\n        /** @type {?} */\n        const allNodes = this.dataNodes.reduce((/**\n         * @param {?} accumulator\n         * @param {?} dataNode\n         * @return {?}\n         */\n        (accumulator, dataNode) => [...accumulator, ...this.getDescendants(dataNode), dataNode]), []);\n        this.expansionModel.select(...allNodes);\n    }\n    /**\n     * Gets a list of descendant dataNodes of a subtree rooted at given data node recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    getDescendants(dataNode) {\n        /** @type {?} */\n        const descendants = [];\n        this._getDescendants(descendants, dataNode);\n        // Remove the node itself\n        return descendants.splice(1);\n    }\n    /**\n     * A helper function to get descendants recursively.\n     * @protected\n     * @param {?} descendants\n     * @param {?} dataNode\n     * @return {?}\n     */\n    _getDescendants(descendants, dataNode) {\n        descendants.push(dataNode);\n        /** @type {?} */\n        const childrenNodes = this.getChildren(dataNode);\n        if (Array.isArray(childrenNodes)) {\n            childrenNodes.forEach((/**\n             * @param {?} child\n             * @return {?}\n             */\n            (child) => this._getDescendants(descendants, child)));\n        }\n        else if (isObservable(childrenNodes)) {\n            // TypeScript as of version 3.5 doesn't seem to treat `Boolean` like a function that\n            // returns a `boolean` specifically in the context of `filter`, so we manually clarify that.\n            childrenNodes.pipe(take(1), filter((/** @type {?} */ (Boolean))))\n                .subscribe((/**\n             * @param {?} children\n             * @return {?}\n             */\n            children => {\n                for (const child of children) {\n                    this._getDescendants(descendants, child);\n                }\n            }));\n        }\n    }\n}\nif (false) {\n    /** @type {?} */\n    NestedTreeControl.prototype.getChildren;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/control/tree-control.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Tree control interface. User can implement TreeControl to expand/collapse dataNodes in the tree.\n * The CDKTree will use this TreeControl to expand/collapse a node.\n * User can also use it outside the `<cdk-tree>` to control the expansion status of the tree.\n * @record\n * @template T\n */\nfunction TreeControl() { }\nif (false) {\n    /**\n     * The saved tree nodes data for `expandAll` action.\n     * @type {?}\n     */\n    TreeControl.prototype.dataNodes;\n    /**\n     * The expansion model\n     * @type {?}\n     */\n    TreeControl.prototype.expansionModel;\n    /**\n     * Get depth of a given data node, return the level number. This is for flat tree node.\n     * @type {?}\n     */\n    TreeControl.prototype.getLevel;\n    /**\n     * Whether the data node is expandable. Returns true if expandable.\n     * This is for flat tree node.\n     * @type {?}\n     */\n    TreeControl.prototype.isExpandable;\n    /**\n     * Gets a stream that emits whenever the given data node's children change.\n     * @type {?}\n     */\n    TreeControl.prototype.getChildren;\n    /**\n     * Whether the data node is expanded or collapsed. Return true if it's expanded.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    TreeControl.prototype.isExpanded = function (dataNode) { };\n    /**\n     * Get all descendants of a data node\n     * @param {?} dataNode\n     * @return {?}\n     */\n    TreeControl.prototype.getDescendants = function (dataNode) { };\n    /**\n     * Expand or collapse data node\n     * @param {?} dataNode\n     * @return {?}\n     */\n    TreeControl.prototype.toggle = function (dataNode) { };\n    /**\n     * Expand one data node\n     * @param {?} dataNode\n     * @return {?}\n     */\n    TreeControl.prototype.expand = function (dataNode) { };\n    /**\n     * Collapse one data node\n     * @param {?} dataNode\n     * @return {?}\n     */\n    TreeControl.prototype.collapse = function (dataNode) { };\n    /**\n     * Expand all the dataNodes in the tree\n     * @return {?}\n     */\n    TreeControl.prototype.expandAll = function () { };\n    /**\n     * Collapse all the dataNodes in the tree\n     * @return {?}\n     */\n    TreeControl.prototype.collapseAll = function () { };\n    /**\n     * Toggle a data node by expand/collapse it and all its descendants\n     * @param {?} dataNode\n     * @return {?}\n     */\n    TreeControl.prototype.toggleDescendants = function (dataNode) { };\n    /**\n     * Expand a data node and all its descendants\n     * @param {?} dataNode\n     * @return {?}\n     */\n    TreeControl.prototype.expandDescendants = function (dataNode) { };\n    /**\n     * Collapse a data node and all its descendants\n     * @param {?} dataNode\n     * @return {?}\n     */\n    TreeControl.prototype.collapseDescendants = function (dataNode) { };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/outlet.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token used to provide a `CdkTreeNode` to its outlet.\n * Used primarily to avoid circular imports.\n * \\@docs-private\n * @type {?}\n */\nconst CDK_TREE_NODE_OUTLET_NODE = new InjectionToken('CDK_TREE_NODE_OUTLET_NODE');\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass CdkTreeNodeOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?=} _node\n     */\n    constructor(viewContainer, _node) {\n        this.viewContainer = viewContainer;\n        this._node = _node;\n    }\n}\nCdkTreeNodeOutlet.ɵfac = function CdkTreeNodeOutlet_Factory(t) { return new (t || CdkTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8)); };\nCdkTreeNodeOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodeOutlet, selectors: [[\"\", \"cdkTreeNodeOutlet\", \"\"]] });\n/** @nocollapse */\nCdkTreeNodeOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TREE_NODE_OUTLET_NODE,] }, { type: Optional }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTreeNodeOutlet, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodeOutlet]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TREE_NODE_OUTLET_NODE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\nif (false) {\n    /** @type {?} */\n    CdkTreeNodeOutlet.prototype.viewContainer;\n    /** @type {?} */\n    CdkTreeNodeOutlet.prototype._node;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/node.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Context provided to the tree node component.\n * @template T\n */\nclass CdkTreeNodeOutletContext {\n    /**\n     * @param {?} data\n     */\n    constructor(data) {\n        this.$implicit = data;\n    }\n}\nif (false) {\n    /**\n     * Data for the node.\n     * @type {?}\n     */\n    CdkTreeNodeOutletContext.prototype.$implicit;\n    /**\n     * Depth of the node.\n     * @type {?}\n     */\n    CdkTreeNodeOutletContext.prototype.level;\n    /**\n     * Index location of the node.\n     * @type {?}\n     */\n    CdkTreeNodeOutletContext.prototype.index;\n    /**\n     * Length of the number of total dataNodes.\n     * @type {?}\n     */\n    CdkTreeNodeOutletContext.prototype.count;\n}\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n * @template T\n */\nclass CdkTreeNodeDef {\n    /**\n     * \\@docs-private\n     * @param {?} template\n     */\n    constructor(template) {\n        this.template = template;\n    }\n}\nCdkTreeNodeDef.ɵfac = function CdkTreeNodeDef_Factory(t) { return new (t || CdkTreeNodeDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkTreeNodeDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodeDef, selectors: [[\"\", \"cdkTreeNodeDef\", \"\"]], inputs: { when: [\"cdkTreeNodeDefWhen\", \"when\"] } });\n/** @nocollapse */\nCdkTreeNodeDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTreeNodeDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodeDef]',\n                inputs: [\n                    'when: cdkTreeNodeDefWhen'\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\nif (false) {\n    /**\n     * Function that should return true if this node template should be used for the provided node\n     * data and index. If left undefined, this node will be considered the default node template to\n     * use when no other when functions return true for the data.\n     * For every node, there must be at least one when function that passes or an undefined to\n     * default.\n     * @type {?}\n     */\n    CdkTreeNodeDef.prototype.when;\n    /** @type {?} */\n    CdkTreeNodeDef.prototype.template;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/tree-errors.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when there is no usable data.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeNoValidDataSourceError() {\n    return Error(`A valid data source must be provided.`);\n}\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeMultipleDefaultNodeDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeMissingMatchingNodeDefError() {\n    return Error(`Could not find a matching node definition for the provided node data.`);\n}\n/**\n * Returns an error to be thrown when there are tree control.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeControlMissingError() {\n    return Error(`Could not find a tree control for the tree.`);\n}\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeControlFunctionsMissingError() {\n    return Error(`Could not find functions for nested/flat tree in tree control.`);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/tree.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n * @template T\n */\nclass CdkTree {\n    /**\n     * @param {?} _differs\n     * @param {?} _changeDetectorRef\n     */\n    constructor(_differs, _changeDetectorRef) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._onDestroy = new Subject();\n        /**\n         * Level of nodes\n         */\n        this._levels = new Map();\n        // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\n        //     Remove the MAX_VALUE in viewChange\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         */\n        this.viewChange = new BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\n    }\n    /**\n     * Provides a stream containing the latest data array to render. Influenced by the tree's\n     * stream of view window (what dataNodes are currently on screen).\n     * Data source can be an observable of data array, or a data array to render.\n     * @return {?}\n     */\n    get dataSource() { return this._dataSource; }\n    /**\n     * @param {?} dataSource\n     * @return {?}\n     */\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._dataDiffer = this._differs.find([]).create(this.trackBy);\n        if (!this.treeControl) {\n            throw getTreeControlMissingError();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._nodeOutlet.viewContainer.clear();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (this._dataSource && typeof ((/** @type {?} */ (this._dataSource))).disconnect === 'function') {\n            ((/** @type {?} */ (this.dataSource))).disconnect(this);\n        }\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        /** @type {?} */\n        const defaultNodeDefs = this._nodeDefs.filter((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => !def.when));\n        if (defaultNodeDefs.length > 1) {\n            throw getTreeMultipleDefaultNodeDefsError();\n        }\n        this._defaultNodeDef = defaultNodeDefs[0];\n        if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n            this._observeRenderChanges();\n        }\n    }\n    // TODO(tinayuangao): Work on keyboard traversal and actions, make sure it's working for RTL\n    //     and nested trees.\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the node outlet. Otherwise start listening for new data.\n     * @private\n     * @param {?} dataSource\n     * @return {?}\n     */\n    _switchDataSource(dataSource) {\n        if (this._dataSource && typeof ((/** @type {?} */ (this._dataSource))).disconnect === 'function') {\n            ((/** @type {?} */ (this.dataSource))).disconnect(this);\n        }\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n        // Remove the all dataNodes if there is now no data source\n        if (!dataSource) {\n            this._nodeOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n        if (this._nodeDefs) {\n            this._observeRenderChanges();\n        }\n    }\n    /**\n     * Set up a subscription for the data provided by the data source.\n     * @private\n     * @return {?}\n     */\n    _observeRenderChanges() {\n        /** @type {?} */\n        let dataStream;\n        if (isDataSource(this._dataSource)) {\n            dataStream = this._dataSource.connect(this);\n        }\n        else if (isObservable(this._dataSource)) {\n            dataStream = this._dataSource;\n        }\n        else if (Array.isArray(this._dataSource)) {\n            dataStream = of(this._dataSource);\n        }\n        if (dataStream) {\n            this._dataSubscription = dataStream.pipe(takeUntil(this._onDestroy))\n                .subscribe((/**\n             * @param {?} data\n             * @return {?}\n             */\n            data => this.renderNodeChanges(data)));\n        }\n        else {\n            throw getTreeNoValidDataSourceError();\n        }\n    }\n    /**\n     * Check for changes made in the data and render each change (node added/removed/moved).\n     * @param {?} data\n     * @param {?=} dataDiffer\n     * @param {?=} viewContainer\n     * @param {?=} parentData\n     * @return {?}\n     */\n    renderNodeChanges(data, dataDiffer = this._dataDiffer, viewContainer = this._nodeOutlet.viewContainer, parentData) {\n        /** @type {?} */\n        const changes = dataDiffer.diff(data);\n        if (!changes) {\n            return;\n        }\n        changes.forEachOperation((/**\n         * @param {?} item\n         * @param {?} adjustedPreviousIndex\n         * @param {?} currentIndex\n         * @return {?}\n         */\n        (item, adjustedPreviousIndex, currentIndex) => {\n            if (item.previousIndex == null) {\n                this.insertNode(data[(/** @type {?} */ (currentIndex))], (/** @type {?} */ (currentIndex)), viewContainer, parentData);\n            }\n            else if (currentIndex == null) {\n                viewContainer.remove((/** @type {?} */ (adjustedPreviousIndex)));\n                this._levels.delete(item.item);\n            }\n            else {\n                /** @type {?} */\n                const view = viewContainer.get((/** @type {?} */ (adjustedPreviousIndex)));\n                viewContainer.move((/** @type {?} */ (view)), currentIndex);\n            }\n        }));\n        this._changeDetectorRef.detectChanges();\n    }\n    /**\n     * Finds the matching node definition that should be used for this node data. If there is only\n     * one node definition, it is returned. Otherwise, find the node definition that has a when\n     * predicate that returns true with the data. If none return true, return the default node\n     * definition.\n     * @param {?} data\n     * @param {?} i\n     * @return {?}\n     */\n    _getNodeDef(data, i) {\n        if (this._nodeDefs.length === 1) {\n            return this._nodeDefs.first;\n        }\n        /** @type {?} */\n        const nodeDef = this._nodeDefs.find((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.when && def.when(i, data))) || this._defaultNodeDef;\n        if (!nodeDef) {\n            throw getTreeMissingMatchingNodeDefError();\n        }\n        return nodeDef;\n    }\n    /**\n     * Create the embedded view for the data node template and place it in the correct index location\n     * within the data node view container.\n     * @param {?} nodeData\n     * @param {?} index\n     * @param {?=} viewContainer\n     * @param {?=} parentData\n     * @return {?}\n     */\n    insertNode(nodeData, index, viewContainer, parentData) {\n        /** @type {?} */\n        const node = this._getNodeDef(nodeData, index);\n        // Node context that will be provided to created embedded view\n        /** @type {?} */\n        const context = new CdkTreeNodeOutletContext(nodeData);\n        // If the tree is flat tree, then use the `getLevel` function in flat tree control\n        // Otherwise, use the level of parent node.\n        if (this.treeControl.getLevel) {\n            context.level = this.treeControl.getLevel(nodeData);\n        }\n        else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n            context.level = (/** @type {?} */ (this._levels.get(parentData))) + 1;\n        }\n        else {\n            context.level = 0;\n        }\n        this._levels.set(nodeData, context.level);\n        // Use default tree nodeOutlet, or nested node's nodeOutlet\n        /** @type {?} */\n        const container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n        container.createEmbeddedView(node.template, context, index);\n        // Set the data to just created `CdkTreeNode`.\n        // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n        //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n        if (CdkTreeNode.mostRecentTreeNode) {\n            CdkTreeNode.mostRecentTreeNode.data = nodeData;\n        }\n    }\n}\nCdkTree.ɵfac = function CdkTree_Factory(t) { return new (t || CdkTree)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nCdkTree.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CdkTree, selectors: [[\"cdk-tree\"]], contentQueries: function CdkTree_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeDef, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeDefs = _t);\n    } }, viewQuery: function CdkTree_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(CdkTreeNodeOutlet, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    } }, hostAttrs: [\"role\", \"tree\", 1, \"cdk-tree\"], inputs: { dataSource: \"dataSource\", treeControl: \"treeControl\", trackBy: \"trackBy\" }, exportAs: [\"cdkTree\"], decls: 1, vars: 0, consts: [[\"cdkTreeNodeOutlet\", \"\"]], template: function CdkTree_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [CdkTreeNodeOutlet], encapsulation: 2 });\n/** @nocollapse */\nCdkTree.ctorParameters = () => [\n    { type: IterableDiffers },\n    { type: ChangeDetectorRef }\n];\nCdkTree.propDecorators = {\n    dataSource: [{ type: Input }],\n    treeControl: [{ type: Input }],\n    trackBy: [{ type: Input }],\n    _nodeOutlet: [{ type: ViewChild, args: [CdkTreeNodeOutlet, { static: true },] }],\n    _nodeDefs: [{ type: ContentChildren, args: [CdkTreeNodeDef, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTree, [{\n        type: Component,\n        args: [{\n                selector: 'cdk-tree',\n                exportAs: 'cdkTree',\n                template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n                host: {\n                    'class': 'cdk-tree',\n                    'role': 'tree'\n                },\n                encapsulation: ViewEncapsulation.None,\n                // The \"OnPush\" status for the `CdkTree` component is effectively a noop, so we are removing it.\n                // The view for `CdkTree` consists entirely of templates declared in other views. As they are\n                // declared elsewhere, they are checked when their declaration points are checked.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default\n            }]\n    }], function () { return [{ type: ɵngcc0.IterableDiffers }, { type: ɵngcc0.ChangeDetectorRef }]; }, { dataSource: [{\n            type: Input\n        }], treeControl: [{\n            type: Input\n        }], trackBy: [{\n            type: Input\n        }], _nodeOutlet: [{\n            type: ViewChild,\n            args: [CdkTreeNodeOutlet, { static: true }]\n        }], _nodeDefs: [{\n            type: ContentChildren,\n            args: [CdkTreeNodeDef, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }] }); })();\nif (false) {\n    /**\n     * Subject that emits when the component has been destroyed.\n     * @type {?}\n     * @private\n     */\n    CdkTree.prototype._onDestroy;\n    /**\n     * Differ used to find the changes in the data provided by the data source.\n     * @type {?}\n     * @private\n     */\n    CdkTree.prototype._dataDiffer;\n    /**\n     * Stores the node definition that does not have a when predicate.\n     * @type {?}\n     * @private\n     */\n    CdkTree.prototype._defaultNodeDef;\n    /**\n     * Data subscription\n     * @type {?}\n     * @private\n     */\n    CdkTree.prototype._dataSubscription;\n    /**\n     * Level of nodes\n     * @type {?}\n     * @private\n     */\n    CdkTree.prototype._levels;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTree.prototype._dataSource;\n    /**\n     * The tree controller\n     * @type {?}\n     */\n    CdkTree.prototype.treeControl;\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize node operations by identifying a node based on its data\n     * relative to the function to know if a node should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     * @type {?}\n     */\n    CdkTree.prototype.trackBy;\n    /** @type {?} */\n    CdkTree.prototype._nodeOutlet;\n    /**\n     * The tree node template for the tree\n     * @type {?}\n     */\n    CdkTree.prototype._nodeDefs;\n    /**\n     * Stream containing the latest information on what rows are being displayed on screen.\n     * Can be used by the data source to as a heuristic of what data should be provided.\n     * @type {?}\n     */\n    CdkTree.prototype.viewChange;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTree.prototype._differs;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTree.prototype._changeDetectorRef;\n}\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n * @template T\n */\nclass CdkTreeNode {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _tree\n     */\n    constructor(_elementRef, _tree) {\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * Emits when the node's data has changed.\n         */\n        this._dataChanges = new Subject();\n        /**\n         * The role of the node should be 'group' if it's an internal node,\n         * and 'treeitem' if it's a leaf node.\n         */\n        this.role = 'treeitem';\n        CdkTreeNode.mostRecentTreeNode = (/** @type {?} */ (this));\n    }\n    /**\n     * The tree node's data.\n     * @return {?}\n     */\n    get data() { return this._data; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set data(value) {\n        if (value !== this._data) {\n            this._data = value;\n            this._setRoleFromData();\n            this._dataChanges.next();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    get isExpanded() {\n        return this._tree.treeControl.isExpanded(this._data);\n    }\n    /**\n     * @return {?}\n     */\n    get level() {\n        return this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._data) : 0;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // If this is the last tree node being destroyed,\n        // clear out the reference to avoid leaking memory.\n        if (CdkTreeNode.mostRecentTreeNode === this) {\n            CdkTreeNode.mostRecentTreeNode = null;\n        }\n        this._dataChanges.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Focuses the menu item. Implements for FocusableOption.\n     * @return {?}\n     */\n    focus() {\n        this._elementRef.nativeElement.focus();\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n    _setRoleFromData() {\n        if (this._tree.treeControl.isExpandable) {\n            this.role = this._tree.treeControl.isExpandable(this._data) ? 'group' : 'treeitem';\n        }\n        else {\n            if (!this._tree.treeControl.getChildren) {\n                throw getTreeControlFunctionsMissingError();\n            }\n            /** @type {?} */\n            const childrenNodes = this._tree.treeControl.getChildren(this._data);\n            if (Array.isArray(childrenNodes)) {\n                this._setRoleFromChildren((/** @type {?} */ (childrenNodes)));\n            }\n            else if (isObservable(childrenNodes)) {\n                childrenNodes.pipe(takeUntil(this._destroyed))\n                    .subscribe((/**\n                 * @param {?} children\n                 * @return {?}\n                 */\n                children => this._setRoleFromChildren(children)));\n            }\n        }\n    }\n    /**\n     * @protected\n     * @param {?} children\n     * @return {?}\n     */\n    _setRoleFromChildren(children) {\n        this.role = children && children.length ? 'group' : 'treeitem';\n    }\n}\nCdkTreeNode.ɵfac = function CdkTreeNode_Factory(t) { return new (t || CdkTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree)); };\nCdkTreeNode.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNode, selectors: [[\"cdk-tree-node\"]], hostAttrs: [1, \"cdk-tree-node\"], hostVars: 3, hostBindings: function CdkTreeNode_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"aria-level\", ctx.role === \"treeitem\" ? ctx.level : null)(\"role\", ctx.role);\n    } }, inputs: { role: \"role\" }, exportAs: [\"cdkTreeNode\"] });\n/**\n * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n * in `CdkTree` and set the data to it.\n */\nCdkTreeNode.mostRecentTreeNode = null;\n/** @nocollapse */\nCdkTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree }\n];\nCdkTreeNode.propDecorators = {\n    role: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-tree-node',\n                exportAs: 'cdkTreeNode',\n                host: {\n                    '[attr.aria-expanded]': 'isExpanded',\n                    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n                    '[attr.role]': 'role',\n                    'class': 'cdk-tree-node'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: CdkTree }]; }, { role: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /**\n     * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n     * in `CdkTree` and set the data to it.\n     * @type {?}\n     */\n    CdkTreeNode.mostRecentTreeNode;\n    /**\n     * Subject that emits when the component has been destroyed.\n     * @type {?}\n     * @protected\n     */\n    CdkTreeNode.prototype._destroyed;\n    /**\n     * Emits when the node's data has changed.\n     * @type {?}\n     */\n    CdkTreeNode.prototype._dataChanges;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkTreeNode.prototype._data;\n    /**\n     * The role of the node should be 'group' if it's an internal node,\n     * and 'treeitem' if it's a leaf node.\n     * @type {?}\n     */\n    CdkTreeNode.prototype.role;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkTreeNode.prototype._elementRef;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkTreeNode.prototype._tree;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/nested-node.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * The children of node will be automatically added to `cdkTreeNodeOutlet`.\n * @template T\n */\nclass CdkNestedTreeNode extends CdkTreeNode {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _tree\n     * @param {?} _differs\n     */\n    constructor(_elementRef, _tree, _differs) {\n        super(_elementRef, _tree);\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        this._differs = _differs;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n        if (!this._tree.treeControl.getChildren) {\n            throw getTreeControlFunctionsMissingError();\n        }\n        /** @type {?} */\n        const childrenNodes = this._tree.treeControl.getChildren(this.data);\n        if (Array.isArray(childrenNodes)) {\n            this.updateChildrenNodes((/** @type {?} */ (childrenNodes)));\n        }\n        else if (isObservable(childrenNodes)) {\n            childrenNodes.pipe(takeUntil(this._destroyed))\n                .subscribe((/**\n             * @param {?} result\n             * @return {?}\n             */\n            result => this.updateChildrenNodes(result)));\n        }\n        this.nodeOutlet.changes.pipe(takeUntil(this._destroyed))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => this.updateChildrenNodes()));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._clear();\n        super.ngOnDestroy();\n    }\n    /**\n     * Add children dataNodes to the NodeOutlet\n     * @protected\n     * @param {?=} children\n     * @return {?}\n     */\n    updateChildrenNodes(children) {\n        /** @type {?} */\n        const outlet = this._getNodeOutlet();\n        if (children) {\n            this._children = children;\n        }\n        if (outlet && this._children) {\n            /** @type {?} */\n            const viewContainer = outlet.viewContainer;\n            this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n        }\n        else {\n            // Reset the data differ if there's no children nodes displayed\n            this._dataDiffer.diff([]);\n        }\n    }\n    /**\n     * Clear the children dataNodes.\n     * @protected\n     * @return {?}\n     */\n    _clear() {\n        /** @type {?} */\n        const outlet = this._getNodeOutlet();\n        if (outlet) {\n            outlet.viewContainer.clear();\n            this._dataDiffer.diff([]);\n        }\n    }\n    /**\n     * Gets the outlet for the current node.\n     * @private\n     * @return {?}\n     */\n    _getNodeOutlet() {\n        /** @type {?} */\n        const outlets = this.nodeOutlet;\n        // Note that since we use `descendants: true` on the query, we have to ensure\n        // that we don't pick up the outlet of a child node by accident.\n        return outlets && outlets.find((/**\n         * @param {?} outlet\n         * @return {?}\n         */\n        outlet => !outlet._node || outlet._node === this));\n    }\n}\nCdkNestedTreeNode.ɵfac = function CdkNestedTreeNode_Factory(t) { return new (t || CdkNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers)); };\nCdkNestedTreeNode.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkNestedTreeNode, selectors: [[\"cdk-nested-tree-node\"]], contentQueries: function CdkNestedTreeNode_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkTreeNodeOutlet, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t);\n    } }, hostAttrs: [1, \"cdk-tree-node\", \"cdk-nested-tree-node\"], hostVars: 2, hostBindings: function CdkNestedTreeNode_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"role\", ctx.role);\n    } }, exportAs: [\"cdkNestedTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: CdkTreeNode, useExisting: CdkNestedTreeNode },\n            { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: CdkNestedTreeNode }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nCdkNestedTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree },\n    { type: IterableDiffers }\n];\nCdkNestedTreeNode.propDecorators = {\n    nodeOutlet: [{ type: ContentChildren, args: [CdkTreeNodeOutlet, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkNestedTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-nested-tree-node',\n                exportAs: 'cdkNestedTreeNode',\n                host: {\n                    '[attr.aria-expanded]': 'isExpanded',\n                    '[attr.role]': 'role',\n                    'class': 'cdk-tree-node cdk-nested-tree-node'\n                },\n                providers: [\n                    { provide: CdkTreeNode, useExisting: CdkNestedTreeNode },\n                    { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: CdkNestedTreeNode }\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: CdkTree }, { type: ɵngcc0.IterableDiffers }]; }, { nodeOutlet: [{\n            type: ContentChildren,\n            args: [CdkTreeNodeOutlet, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }] }); })();\nif (false) {\n    /**\n     * Differ used to find the changes in the data provided by the data source.\n     * @type {?}\n     * @private\n     */\n    CdkNestedTreeNode.prototype._dataDiffer;\n    /**\n     * The children data dataNodes of current node. They will be placed in `CdkTreeNodeOutlet`.\n     * @type {?}\n     * @protected\n     */\n    CdkNestedTreeNode.prototype._children;\n    /**\n     * The children node placeholder.\n     * @type {?}\n     */\n    CdkNestedTreeNode.prototype.nodeOutlet;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkNestedTreeNode.prototype._elementRef;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkNestedTreeNode.prototype._tree;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkNestedTreeNode.prototype._differs;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/padding.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Regex used to split a string on its CSS units.\n * @type {?}\n */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n * @template T\n */\nclass CdkTreeNodePadding {\n    /**\n     * @param {?} _treeNode\n     * @param {?} _tree\n     * @param {?} _renderer\n     * @param {?} _element\n     * @param {?} _dir\n     */\n    constructor(_treeNode, _tree, _renderer, _element, _dir) {\n        this._treeNode = _treeNode;\n        this._tree = _tree;\n        this._renderer = _renderer;\n        this._element = _element;\n        this._dir = _dir;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * CSS units used for the indentation value.\n         */\n        this.indentUnits = 'px';\n        this._indent = 40;\n        this._setPadding();\n        if (_dir) {\n            _dir.change.pipe(takeUntil(this._destroyed)).subscribe((/**\n             * @return {?}\n             */\n            () => this._setPadding(true)));\n        }\n        // In Ivy the indentation binding might be set before the tree node's data has been added,\n        // which means that we'll miss the first render. We have to subscribe to changes in the\n        // data to ensure that everything is up to date.\n        _treeNode._dataChanges.subscribe((/**\n         * @return {?}\n         */\n        () => this._setPadding()));\n    }\n    /**\n     * The level of depth of the tree node. The padding will be `level * indent` pixels.\n     * @return {?}\n     */\n    get level() { return this._level; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set level(value) {\n        // Set to null as the fallback value so that _setPadding can fall back to the node level if the\n        // consumer set the directive as `cdkTreeNodePadding=\"\"`. We still want to take this value if\n        // they set 0 explicitly.\n        this._level = (/** @type {?} */ (coerceNumberProperty(value, null)));\n        this._setPadding();\n    }\n    /**\n     * The indent for each level. Can be a number or a CSS string.\n     * Default number 40px from material design menu sub-menu spec.\n     * @return {?}\n     */\n    get indent() { return this._indent; }\n    /**\n     * @param {?} indent\n     * @return {?}\n     */\n    set indent(indent) {\n        /** @type {?} */\n        let value = indent;\n        /** @type {?} */\n        let units = 'px';\n        if (typeof indent === 'string') {\n            /** @type {?} */\n            const parts = indent.split(cssUnitPattern);\n            value = parts[0];\n            units = parts[1] || units;\n        }\n        this.indentUnits = units;\n        this._indent = coerceNumberProperty(value);\n        this._setPadding();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * The padding indent value for the tree node. Returns a string with px numbers if not null.\n     * @return {?}\n     */\n    _paddingIndent() {\n        /** @type {?} */\n        const nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\n            ? this._tree.treeControl.getLevel(this._treeNode.data)\n            : null;\n        /** @type {?} */\n        const level = this._level == null ? nodeLevel : this._level;\n        return typeof level === 'number' ? `${level * this._indent}${this.indentUnits}` : null;\n    }\n    /**\n     * @param {?=} forceChange\n     * @return {?}\n     */\n    _setPadding(forceChange = false) {\n        /** @type {?} */\n        const padding = this._paddingIndent();\n        if (padding !== this._currentPadding || forceChange) {\n            /** @type {?} */\n            const element = this._element.nativeElement;\n            /** @type {?} */\n            const paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n            /** @type {?} */\n            const resetProp = paddingProp === 'paddingLeft' ? 'paddingRight' : 'paddingLeft';\n            this._renderer.setStyle(element, paddingProp, padding);\n            this._renderer.setStyle(element, resetProp, null);\n            this._currentPadding = padding;\n        }\n    }\n}\nCdkTreeNodePadding.ɵfac = function CdkTreeNodePadding_Factory(t) { return new (t || CdkTreeNodePadding)(ɵngcc0.ɵɵdirectiveInject(CdkTreeNode), ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8)); };\nCdkTreeNodePadding.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodePadding, selectors: [[\"\", \"cdkTreeNodePadding\", \"\"]], inputs: { level: [\"cdkTreeNodePadding\", \"level\"], indent: [\"cdkTreeNodePaddingIndent\", \"indent\"] } });\n/** @nocollapse */\nCdkTreeNodePadding.ctorParameters = () => [\n    { type: CdkTreeNode },\n    { type: CdkTree },\n    { type: Renderer2 },\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nCdkTreeNodePadding.propDecorators = {\n    level: [{ type: Input, args: ['cdkTreeNodePadding',] }],\n    indent: [{ type: Input, args: ['cdkTreeNodePaddingIndent',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTreeNodePadding, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTreeNodePadding]'\n            }]\n    }], function () { return [{ type: CdkTreeNode }, { type: CdkTree }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { level: [{\n            type: Input,\n            args: ['cdkTreeNodePadding']\n        }], indent: [{\n            type: Input,\n            args: ['cdkTreeNodePaddingIndent']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkTreeNodePadding.ngAcceptInputType_level;\n    /**\n     * Current padding value applied to the element. Used to avoid unnecessarily hitting the DOM.\n     * @type {?}\n     * @private\n     */\n    CdkTreeNodePadding.prototype._currentPadding;\n    /**\n     * Subject that emits when the component has been destroyed.\n     * @type {?}\n     * @private\n     */\n    CdkTreeNodePadding.prototype._destroyed;\n    /**\n     * CSS units used for the indentation value.\n     * @type {?}\n     */\n    CdkTreeNodePadding.prototype.indentUnits;\n    /** @type {?} */\n    CdkTreeNodePadding.prototype._level;\n    /** @type {?} */\n    CdkTreeNodePadding.prototype._indent;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTreeNodePadding.prototype._treeNode;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTreeNodePadding.prototype._tree;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTreeNodePadding.prototype._renderer;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTreeNodePadding.prototype._element;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTreeNodePadding.prototype._dir;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/toggle.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Node toggle to expand/collapse the node.\n * @template T\n */\nclass CdkTreeNodeToggle {\n    /**\n     * @param {?} _tree\n     * @param {?} _treeNode\n     */\n    constructor(_tree, _treeNode) {\n        this._tree = _tree;\n        this._treeNode = _treeNode;\n        this._recursive = false;\n    }\n    /**\n     * Whether expand/collapse the node recursively.\n     * @return {?}\n     */\n    get recursive() { return this._recursive; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set recursive(value) { this._recursive = coerceBooleanProperty(value); }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _toggle(event) {\n        this.recursive\n            ? this._tree.treeControl.toggleDescendants(this._treeNode.data)\n            : this._tree.treeControl.toggle(this._treeNode.data);\n        event.stopPropagation();\n    }\n}\nCdkTreeNodeToggle.ɵfac = function CdkTreeNodeToggle_Factory(t) { return new (t || CdkTreeNodeToggle)(ɵngcc0.ɵɵdirectiveInject(CdkTree), ɵngcc0.ɵɵdirectiveInject(CdkTreeNode)); };\nCdkTreeNodeToggle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkTreeNodeToggle, selectors: [[\"\", \"cdkTreeNodeToggle\", \"\"]], hostBindings: function CdkTreeNodeToggle_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function CdkTreeNodeToggle_click_HostBindingHandler($event) { return ctx._toggle($event); });\n    } }, inputs: { recursive: [\"cdkTreeNodeToggleRecursive\", \"recursive\"] } });\n/** @nocollapse */\nCdkTreeNodeToggle.ctorParameters = () => [\n    { type: CdkTree },\n    { type: CdkTreeNode }\n];\nCdkTreeNodeToggle.propDecorators = {\n    recursive: [{ type: Input, args: ['cdkTreeNodeToggleRecursive',] }],\n    _toggle: [{ type: HostListener, args: ['click', ['$event'],] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTreeNodeToggle, [{\n        type: Directive,\n        args: [{ selector: '[cdkTreeNodeToggle]' }]\n    }], function () { return [{ type: CdkTree }, { type: CdkTreeNode }]; }, { recursive: [{\n            type: Input,\n            args: ['cdkTreeNodeToggleRecursive']\n        }], _toggle: [{\n            type: HostListener,\n            args: ['click', ['$event']]\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkTreeNodeToggle.ngAcceptInputType_recursive;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkTreeNodeToggle.prototype._recursive;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkTreeNodeToggle.prototype._tree;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkTreeNodeToggle.prototype._treeNode;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/tree-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EXPORTED_DECLARATIONS = [\n    CdkNestedTreeNode,\n    CdkTreeNodeDef,\n    CdkTreeNodePadding,\n    CdkTreeNodeToggle,\n    CdkTree,\n    CdkTreeNode,\n    CdkTreeNodeOutlet,\n];\nclass CdkTreeModule {\n}\nCdkTreeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CdkTreeModule });\nCdkTreeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function CdkTreeModule_Factory(t) { return new (t || CdkTreeModule)(); }, providers: [FocusMonitor, CdkTreeNodeDef] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTreeModule, { declarations: [CdkNestedTreeNode,\n        CdkTreeNodeDef,\n        CdkTreeNodePadding,\n        CdkTreeNodeToggle,\n        CdkTree,\n        CdkTreeNode,\n        CdkTreeNodeOutlet], exports: [CdkNestedTreeNode,\n        CdkTreeNodeDef,\n        CdkTreeNodePadding,\n        CdkTreeNodeToggle,\n        CdkTree,\n        CdkTreeNode,\n        CdkTreeNodeOutlet] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTreeModule, [{\n        type: NgModule,\n        args: [{\n                exports: EXPORTED_DECLARATIONS,\n                declarations: EXPORTED_DECLARATIONS,\n                providers: [FocusMonitor, CdkTreeNodeDef]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseTreeControl, CDK_TREE_NODE_OUTLET_NODE, CdkNestedTreeNode, CdkTree, CdkTreeModule, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodeOutlet, CdkTreeNodeOutletContext, CdkTreeNodePadding, CdkTreeNodeToggle, FlatTreeControl, NestedTreeControl, getTreeControlFunctionsMissingError, getTreeControlMissingError, getTreeMissingMatchingNodeDefError, getTreeMultipleDefaultNodeDefsError, getTreeNoValidDataSourceError };\n\n//# sourceMappingURL=tree.js.map","import { InjectionToken, inject, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, NgZone, Optional, Inject, Input, ViewChild, Output, NgModule } from '@angular/core';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subscription, fromEvent } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/progress-bar/progress-bar.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Last animation end data.\n * @record\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nconst _c0 = [\"primaryValueBar\"];\nfunction ProgressAnimationEnd() { }\nif (false) {\n    /** @type {?} */\n    ProgressAnimationEnd.prototype.value;\n}\n// Boilerplate for applying mixins to MatProgressBar.\n/**\n * \\@docs-private\n */\nclass MatProgressBarBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatProgressBarBase.prototype._elementRef;\n}\n/** @type {?} */\nconst _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_PROGRESS_BAR_LOCATION = new InjectionToken('mat-progress-bar-location', { providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY });\n/**\n * Stubbed out location for `MatProgressBar`.\n * \\@docs-private\n * @record\n */\nfunction MatProgressBarLocation() { }\nif (false) {\n    /** @type {?} */\n    MatProgressBarLocation.prototype.getPathname;\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_PROGRESS_BAR_LOCATION_FACTORY() {\n    /** @type {?} */\n    const _document = inject(DOCUMENT);\n    /** @type {?} */\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: (/**\n         * @return {?}\n         */\n        () => _location ? (_location.pathname + _location.search) : '')\n    };\n}\n/**\n * Counter used to generate unique IDs for progress bars.\n * @type {?}\n */\nlet progressbarId = 0;\n/**\n * `<mat-progress-bar>` component.\n */\nclass MatProgressBar extends _MatProgressBarMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _ngZone\n     * @param {?=} _animationMode\n     * @param {?=} location\n     */\n    constructor(_elementRef, _ngZone, _animationMode, \n    /**\n     * @deprecated `location` parameter to be made required.\n     * @breaking-change 8.0.0\n     */\n    location) {\n        super(_elementRef);\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._animationMode = _animationMode;\n        /**\n         * Flag that indicates whether NoopAnimations mode is set to true.\n         */\n        this._isNoopAnimation = false;\n        this._value = 0;\n        this._bufferValue = 0;\n        /**\n         * Event emitted when animation of the primary progress bar completes. This event will not\n         * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n         * animations (indeterminate and query).\n         */\n        this.animationEnd = new EventEmitter();\n        /**\n         * Reference to animation end subscription to be unsubscribed on destroy.\n         */\n        this._animationEndSubscription = Subscription.EMPTY;\n        /**\n         * Mode of the progress bar.\n         *\n         * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n         * 'determinate'.\n         * Mirrored to mode attribute.\n         */\n        this.mode = 'determinate';\n        /**\n         * ID of the progress bar.\n         */\n        this.progressbarId = `mat-progress-bar-${progressbarId++}`;\n        // We need to prefix the SVG reference with the current path, otherwise they won't work\n        // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n        // because named route URLs can contain parentheses (see #12338). Also we don't use since\n        // we can't tell the difference between whether\n        // the consumer is using the hash location strategy or not, because `Location` normalizes\n        // both `/#/foo/bar` and `/foo/bar` to the same thing.\n        /** @type {?} */\n        const path = location ? location.getPathname().split('#')[0] : '';\n        this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n        this._isNoopAnimation = _animationMode === 'NoopAnimations';\n    }\n    /**\n     * Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow.\n     * @return {?}\n     */\n    get value() { return this._value; }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set value(v) {\n        this._value = clamp(coerceNumberProperty(v) || 0);\n    }\n    /**\n     * Buffer value of the progress bar. Defaults to zero.\n     * @return {?}\n     */\n    get bufferValue() { return this._bufferValue; }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set bufferValue(v) { this._bufferValue = clamp(v || 0); }\n    /**\n     * Gets the current transform value for the progress bar's primary indicator.\n     * @return {?}\n     */\n    _primaryTransform() {\n        /** @type {?} */\n        const scale = this.value / 100;\n        return { transform: `scaleX(${scale})` };\n    }\n    /**\n     * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n     * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n     * @return {?}\n     */\n    _bufferTransform() {\n        if (this.mode === 'buffer') {\n            /** @type {?} */\n            const scale = this.bufferValue / 100;\n            return { transform: `scaleX(${scale})` };\n        }\n        return null;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        // Run outside angular so change detection didn't get triggered on every transition end\n        // instead only on the animation that we care about (primary value bar's transitionend)\n        this._ngZone.runOutsideAngular(((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const element = this._primaryValueBar.nativeElement;\n            this._animationEndSubscription =\n                ((/** @type {?} */ (fromEvent(element, 'transitionend'))))\n                    .pipe(filter(((/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => e.target === element))))\n                    .subscribe((/**\n                 * @return {?}\n                 */\n                () => {\n                    if (this.mode === 'determinate' || this.mode === 'buffer') {\n                        this._ngZone.run((/**\n                         * @return {?}\n                         */\n                        () => this.animationEnd.next({ value: this.value })));\n                    }\n                }));\n        })));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._animationEndSubscription.unsubscribe();\n    }\n}\nMatProgressBar.ɵfac = function MatProgressBar_Factory(t) { return new (t || MatProgressBar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_BAR_LOCATION, 8)); };\nMatProgressBar.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatProgressBar, selectors: [[\"mat-progress-bar\"]], viewQuery: function MatProgressBar_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._primaryValueBar = _t.first);\n    } }, hostAttrs: [\"role\", \"progressbar\", \"aria-valuemin\", \"0\", \"aria-valuemax\", \"100\", 1, \"mat-progress-bar\"], hostVars: 4, hostBindings: function MatProgressBar_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-valuenow\", ctx.mode === \"indeterminate\" || ctx.mode === \"query\" ? null : ctx.value)(\"mode\", ctx.mode);\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._isNoopAnimation);\n    } }, inputs: { color: \"color\", mode: \"mode\", value: \"value\", bufferValue: \"bufferValue\" }, outputs: { animationEnd: \"animationEnd\" }, exportAs: [\"matProgressBar\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 9, vars: 4, consts: [[\"width\", \"100%\", \"height\", \"4\", \"focusable\", \"false\", 1, \"mat-progress-bar-background\", \"mat-progress-bar-element\"], [\"x\", \"4\", \"y\", \"0\", \"width\", \"8\", \"height\", \"4\", \"patternUnits\", \"userSpaceOnUse\", 3, \"id\"], [\"cx\", \"2\", \"cy\", \"2\", \"r\", \"2\"], [\"width\", \"100%\", \"height\", \"100%\"], [1, \"mat-progress-bar-buffer\", \"mat-progress-bar-element\", 3, \"ngStyle\"], [1, \"mat-progress-bar-primary\", \"mat-progress-bar-fill\", \"mat-progress-bar-element\", 3, \"ngStyle\"], [\"primaryValueBar\", \"\"], [1, \"mat-progress-bar-secondary\", \"mat-progress-bar-fill\", \"mat-progress-bar-element\"]], template: function MatProgressBar_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"defs\");\n        ɵngcc0.ɵɵelementStart(2, \"pattern\", 1);\n        ɵngcc0.ɵɵelement(3, \"circle\", 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(4, \"rect\", 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵnamespaceHTML();\n        ɵngcc0.ɵɵelement(5, \"div\", 4);\n        ɵngcc0.ɵɵelement(6, \"div\", 5, 6);\n        ɵngcc0.ɵɵelement(8, \"div\", 7);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.progressbarId);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵattribute(\"fill\", ctx._rectangleFillValue);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._bufferTransform());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._primaryTransform());\n    } }, directives: [ɵngcc1.NgStyle], styles: [\".mat-progress-bar{display:block;height:4px;overflow:hidden;position:relative;transition:opacity 250ms linear;width:100%}._mat-animation-noopable.mat-progress-bar{transition:none;animation:none}.mat-progress-bar .mat-progress-bar-element,.mat-progress-bar .mat-progress-bar-fill::after{height:100%;position:absolute;width:100%}.mat-progress-bar .mat-progress-bar-background{width:calc(100% + 10px)}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-background{display:none}.mat-progress-bar .mat-progress-bar-buffer{transform-origin:top left;transition:transform 250ms ease}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-buffer{border-top:solid 5px;opacity:.5}.mat-progress-bar .mat-progress-bar-secondary{display:none}.mat-progress-bar .mat-progress-bar-fill{animation:none;transform-origin:top left;transition:transform 250ms ease}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-fill{border-top:solid 4px}.mat-progress-bar .mat-progress-bar-fill::after{animation:none;content:\\\"\\\";display:inline-block;left:0}.mat-progress-bar[dir=rtl],[dir=rtl] .mat-progress-bar{transform:rotateY(180deg)}.mat-progress-bar[mode=query]{transform:rotateZ(180deg)}.mat-progress-bar[mode=query][dir=rtl],[dir=rtl] .mat-progress-bar[mode=query]{transform:rotateZ(180deg) rotateY(180deg)}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-fill,.mat-progress-bar[mode=query] .mat-progress-bar-fill{transition:none}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary,.mat-progress-bar[mode=query] .mat-progress-bar-primary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-translate 2000ms infinite linear;left:-145.166611%}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-primary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-scale 2000ms infinite linear}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary,.mat-progress-bar[mode=query] .mat-progress-bar-secondary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-translate 2000ms infinite linear;left:-54.888891%;display:block}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-secondary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-scale 2000ms infinite linear}.mat-progress-bar[mode=buffer] .mat-progress-bar-background{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-background-scroll 250ms infinite linear;display:block}.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-buffer,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-background{animation:none;transition-duration:1ms}@keyframes mat-progress-bar-primary-indeterminate-translate{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(83.67142%)}100%{transform:translateX(200.611057%)}}@keyframes mat-progress-bar-primary-indeterminate-scale{0%{transform:scaleX(0.08)}36.65%{animation-timing-function:cubic-bezier(0.334731, 0.12482, 0.785844, 1);transform:scaleX(0.08)}69.15%{animation-timing-function:cubic-bezier(0.06, 0.11, 0.6, 1);transform:scaleX(0.661479)}100%{transform:scaleX(0.08)}}@keyframes mat-progress-bar-secondary-indeterminate-translate{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:translateX(37.651913%)}48.35%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:translateX(84.386165%)}100%{transform:translateX(160.277782%)}}@keyframes mat-progress-bar-secondary-indeterminate-scale{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:scaleX(0.08)}19.15%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:scaleX(0.457104)}44.15%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:scaleX(0.72796)}100%{transform:scaleX(0.08)}}@keyframes mat-progress-bar-background-scroll{to{transform:translateX(-8px)}}\\n\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatProgressBar.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_PROGRESS_BAR_LOCATION,] }] }\n];\nMatProgressBar.propDecorators = {\n    value: [{ type: Input }],\n    bufferValue: [{ type: Input }],\n    _primaryValueBar: [{ type: ViewChild, args: ['primaryValueBar',] }],\n    animationEnd: [{ type: Output }],\n    mode: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatProgressBar, [{\n        type: Component,\n        args: [{\n                selector: 'mat-progress-bar',\n                exportAs: 'matProgressBar',\n                host: {\n                    'role': 'progressbar',\n                    'aria-valuemin': '0',\n                    'aria-valuemax': '100',\n                    '[attr.aria-valuenow]': '(mode === \"indeterminate\" || mode === \"query\") ? null : value',\n                    '[attr.mode]': 'mode',\n                    'class': 'mat-progress-bar',\n                    '[class._mat-animation-noopable]': '_isNoopAnimation'\n                },\n                inputs: ['color'],\n                template: \"<!--\\n  The background div is named as such because it appears below the other divs and is not sized based\\n  on values.\\n-->\\n<svg width=\\\"100%\\\" height=\\\"4\\\" focusable=\\\"false\\\" class=\\\"mat-progress-bar-background mat-progress-bar-element\\\">\\n  <defs>\\n    <pattern [id]=\\\"progressbarId\\\" x=\\\"4\\\" y=\\\"0\\\" width=\\\"8\\\" height=\\\"4\\\" patternUnits=\\\"userSpaceOnUse\\\">\\n      <circle cx=\\\"2\\\" cy=\\\"2\\\" r=\\\"2\\\"/>\\n    </pattern>\\n  </defs>\\n  <rect [attr.fill]=\\\"_rectangleFillValue\\\" width=\\\"100%\\\" height=\\\"100%\\\"/>\\n</svg>\\n<div class=\\\"mat-progress-bar-buffer mat-progress-bar-element\\\" [ngStyle]=\\\"_bufferTransform()\\\"></div>\\n<div class=\\\"mat-progress-bar-primary mat-progress-bar-fill mat-progress-bar-element\\\" [ngStyle]=\\\"_primaryTransform()\\\" #primaryValueBar></div>\\n<div class=\\\"mat-progress-bar-secondary mat-progress-bar-fill mat-progress-bar-element\\\"></div>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".mat-progress-bar{display:block;height:4px;overflow:hidden;position:relative;transition:opacity 250ms linear;width:100%}._mat-animation-noopable.mat-progress-bar{transition:none;animation:none}.mat-progress-bar .mat-progress-bar-element,.mat-progress-bar .mat-progress-bar-fill::after{height:100%;position:absolute;width:100%}.mat-progress-bar .mat-progress-bar-background{width:calc(100% + 10px)}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-background{display:none}.mat-progress-bar .mat-progress-bar-buffer{transform-origin:top left;transition:transform 250ms ease}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-buffer{border-top:solid 5px;opacity:.5}.mat-progress-bar .mat-progress-bar-secondary{display:none}.mat-progress-bar .mat-progress-bar-fill{animation:none;transform-origin:top left;transition:transform 250ms ease}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-fill{border-top:solid 4px}.mat-progress-bar .mat-progress-bar-fill::after{animation:none;content:\\\"\\\";display:inline-block;left:0}.mat-progress-bar[dir=rtl],[dir=rtl] .mat-progress-bar{transform:rotateY(180deg)}.mat-progress-bar[mode=query]{transform:rotateZ(180deg)}.mat-progress-bar[mode=query][dir=rtl],[dir=rtl] .mat-progress-bar[mode=query]{transform:rotateZ(180deg) rotateY(180deg)}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-fill,.mat-progress-bar[mode=query] .mat-progress-bar-fill{transition:none}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary,.mat-progress-bar[mode=query] .mat-progress-bar-primary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-translate 2000ms infinite linear;left:-145.166611%}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-primary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-scale 2000ms infinite linear}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary,.mat-progress-bar[mode=query] .mat-progress-bar-secondary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-translate 2000ms infinite linear;left:-54.888891%;display:block}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-secondary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-scale 2000ms infinite linear}.mat-progress-bar[mode=buffer] .mat-progress-bar-background{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-background-scroll 250ms infinite linear;display:block}.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-buffer,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-background{animation:none;transition-duration:1ms}@keyframes mat-progress-bar-primary-indeterminate-translate{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(83.67142%)}100%{transform:translateX(200.611057%)}}@keyframes mat-progress-bar-primary-indeterminate-scale{0%{transform:scaleX(0.08)}36.65%{animation-timing-function:cubic-bezier(0.334731, 0.12482, 0.785844, 1);transform:scaleX(0.08)}69.15%{animation-timing-function:cubic-bezier(0.06, 0.11, 0.6, 1);transform:scaleX(0.661479)}100%{transform:scaleX(0.08)}}@keyframes mat-progress-bar-secondary-indeterminate-translate{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:translateX(37.651913%)}48.35%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:translateX(84.386165%)}100%{transform:translateX(160.277782%)}}@keyframes mat-progress-bar-secondary-indeterminate-scale{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:scaleX(0.08)}19.15%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:scaleX(0.457104)}44.15%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:scaleX(0.72796)}100%{transform:scaleX(0.08)}}@keyframes mat-progress-bar-background-scroll{to{transform:translateX(-8px)}}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_PROGRESS_BAR_LOCATION]\n            }] }]; }, { animationEnd: [{\n            type: Output\n        }], mode: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], bufferValue: [{\n            type: Input\n        }], _primaryValueBar: [{\n            type: ViewChild,\n            args: ['primaryValueBar']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatProgressBar.ngAcceptInputType_value;\n    /**\n     * Flag that indicates whether NoopAnimations mode is set to true.\n     * @type {?}\n     */\n    MatProgressBar.prototype._isNoopAnimation;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatProgressBar.prototype._value;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatProgressBar.prototype._bufferValue;\n    /** @type {?} */\n    MatProgressBar.prototype._primaryValueBar;\n    /**\n     * Event emitted when animation of the primary progress bar completes. This event will not\n     * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n     * animations (indeterminate and query).\n     * @type {?}\n     */\n    MatProgressBar.prototype.animationEnd;\n    /**\n     * Reference to animation end subscription to be unsubscribed on destroy.\n     * @type {?}\n     * @private\n     */\n    MatProgressBar.prototype._animationEndSubscription;\n    /**\n     * Mode of the progress bar.\n     *\n     * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n     * 'determinate'.\n     * Mirrored to mode attribute.\n     * @type {?}\n     */\n    MatProgressBar.prototype.mode;\n    /**\n     * ID of the progress bar.\n     * @type {?}\n     */\n    MatProgressBar.prototype.progressbarId;\n    /**\n     * Attribute to be used for the `fill` attribute on the internal `rect` element.\n     * @type {?}\n     */\n    MatProgressBar.prototype._rectangleFillValue;\n    /** @type {?} */\n    MatProgressBar.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatProgressBar.prototype._ngZone;\n    /** @type {?} */\n    MatProgressBar.prototype._animationMode;\n}\n/**\n * Clamps a value to be between two numbers, by default 0 and 100.\n * @param {?} v\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nfunction clamp(v, min = 0, max = 100) {\n    return Math.max(min, Math.min(max, v));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/progress-bar/progress-bar-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatProgressBarModule {\n}\nMatProgressBarModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatProgressBarModule });\nMatProgressBarModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatProgressBarModule_Factory(t) { return new (t || MatProgressBarModule)(); }, imports: [[CommonModule, MatCommonModule],\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatProgressBarModule, { declarations: function () { return [MatProgressBar]; }, imports: function () { return [CommonModule, MatCommonModule]; }, exports: function () { return [MatProgressBar,\n        MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatProgressBarModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule, MatCommonModule],\n                exports: [MatProgressBar, MatCommonModule],\n                declarations: [MatProgressBar]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/progress-bar/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_PROGRESS_BAR_LOCATION, MAT_PROGRESS_BAR_LOCATION_FACTORY, MatProgressBar, MatProgressBarModule };\n\n//# sourceMappingURL=progress-bar.js.map","import { CdkTreeNode, CdkTree, CdkTreeNodeDef, CdkNestedTreeNode, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport { Directive, ElementRef, Attribute, Input, IterableDiffers, ViewContainerRef, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { take, map } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tree/node.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/tree';\nconst _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\n/**\n * Wrapper for the CdkTree node with Material design styles.\n * @template T\n */\nclass MatTreeNode extends _MatTreeNodeMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _tree\n     * @param {?} tabIndex\n     */\n    constructor(_elementRef, _tree, tabIndex) {\n        super(_elementRef, _tree);\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        this.role = 'treeitem';\n        this.tabIndex = Number(tabIndex) || 0;\n    }\n}\nMatTreeNode.ɵfac = function MatTreeNode_Factory(t) { return new (t || MatTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatTreeNode.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTreeNode, selectors: [[\"mat-tree-node\"]], hostAttrs: [1, \"mat-tree-node\"], hostVars: 3, hostBindings: function MatTreeNode_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"aria-level\", ctx.role === \"treeitem\" ? ctx.level : null)(\"role\", ctx.role);\n    } }, inputs: { disabled: \"disabled\", tabIndex: \"tabIndex\", role: \"role\" }, exportAs: [\"matTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNode, useExisting: MatTreeNode }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nMatTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\nMatTreeNode.propDecorators = {\n    role: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-tree-node',\n                exportAs: 'matTreeNode',\n                inputs: ['disabled', 'tabIndex'],\n                host: {\n                    '[attr.aria-expanded]': 'isExpanded',\n                    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n                    '[attr.role]': 'role',\n                    'class': 'mat-tree-node'\n                },\n                providers: [{ provide: CdkTreeNode, useExisting: MatTreeNode }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.CdkTree }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, { role: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatTreeNode.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatTreeNode.prototype.role;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatTreeNode.prototype._elementRef;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatTreeNode.prototype._tree;\n}\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * @template T\n */\nclass MatTreeNodeDef extends CdkTreeNodeDef {\n}\nMatTreeNodeDef.ɵfac = function MatTreeNodeDef_Factory(t) { return ɵMatTreeNodeDef_BaseFactory(t || MatTreeNodeDef); };\nMatTreeNodeDef.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeDef, selectors: [[\"\", \"matTreeNodeDef\", \"\"]], inputs: { when: [\"matTreeNodeDefWhen\", \"when\"], data: [\"matTreeNode\", \"data\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTreeNodeDef.propDecorators = {\n    data: [{ type: Input, args: ['matTreeNode',] }]\n};\nconst ɵMatTreeNodeDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeDef);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTreeNodeDef, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeDef]',\n                inputs: [\n                    'when: matTreeNodeDefWhen'\n                ],\n                providers: [{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }]\n            }]\n    }], null, { data: [{\n            type: Input,\n            args: ['matTreeNode']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatTreeNodeDef.prototype.data;\n}\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n * @template T\n */\nclass MatNestedTreeNode extends CdkNestedTreeNode {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _tree\n     * @param {?} _differs\n     * @param {?} tabIndex\n     */\n    constructor(_elementRef, _tree, _differs, tabIndex) {\n        super(_elementRef, _tree, _differs);\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        this._differs = _differs;\n        this._disabled = false;\n        this.tabIndex = Number(tabIndex) || 0;\n    }\n    /**\n     * Whether the node is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /**\n     * Tabindex for the node.\n     * @return {?}\n     */\n    get tabIndex() { return this.disabled ? -1 : this._tabIndex; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set tabIndex(value) {\n        // If the specified tabIndex value is null or undefined, fall back to the default value.\n        this._tabIndex = value != null ? value : 0;\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/23091\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        super.ngAfterContentInit();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n}\nMatNestedTreeNode.ɵfac = function MatNestedTreeNode_Factory(t) { return new (t || MatNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatNestedTreeNode.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatNestedTreeNode, selectors: [[\"mat-nested-tree-node\"]], hostAttrs: [1, \"mat-nested-tree-node\"], hostVars: 2, hostBindings: function MatNestedTreeNode_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"role\", ctx.role);\n    } }, inputs: { tabIndex: \"tabIndex\", disabled: \"disabled\", node: [\"matNestedTreeNode\", \"node\"] }, exportAs: [\"matNestedTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n            { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n            { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nMatNestedTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree },\n    { type: IterableDiffers },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\nMatNestedTreeNode.propDecorators = {\n    node: [{ type: Input, args: ['matNestedTreeNode',] }],\n    disabled: [{ type: Input }],\n    tabIndex: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatNestedTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-nested-tree-node',\n                exportAs: 'matNestedTreeNode',\n                host: {\n                    '[attr.aria-expanded]': 'isExpanded',\n                    '[attr.role]': 'role',\n                    'class': 'mat-nested-tree-node'\n                },\n                providers: [\n                    { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n                    { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n                    { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode }\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.CdkTree }, { type: ɵngcc0.IterableDiffers }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, { tabIndex: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], node: [{\n            type: Input,\n            args: ['matNestedTreeNode']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatNestedTreeNode.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatNestedTreeNode.prototype.node;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatNestedTreeNode.prototype._disabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatNestedTreeNode.prototype._tabIndex;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatNestedTreeNode.prototype._elementRef;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatNestedTreeNode.prototype._tree;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatNestedTreeNode.prototype._differs;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tree/padding.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n * @template T\n */\nclass MatTreeNodePadding extends CdkTreeNodePadding {\n}\nMatTreeNodePadding.ɵfac = function MatTreeNodePadding_Factory(t) { return ɵMatTreeNodePadding_BaseFactory(t || MatTreeNodePadding); };\nMatTreeNodePadding.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodePadding, selectors: [[\"\", \"matTreeNodePadding\", \"\"]], inputs: { level: [\"matTreeNodePadding\", \"level\"], indent: [\"matTreeNodePaddingIndent\", \"indent\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTreeNodePadding.propDecorators = {\n    level: [{ type: Input, args: ['matTreeNodePadding',] }],\n    indent: [{ type: Input, args: ['matTreeNodePaddingIndent',] }]\n};\nconst ɵMatTreeNodePadding_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodePadding);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTreeNodePadding, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodePadding]',\n                providers: [{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }]\n            }]\n    }], null, { level: [{\n            type: Input,\n            args: ['matTreeNodePadding']\n        }], indent: [{\n            type: Input,\n            args: ['matTreeNodePaddingIndent']\n        }] }); })();\nif (false) {\n    /**\n     * The level of depth of the tree node. The padding will be `level * indent` pixels.\n     * @type {?}\n     */\n    MatTreeNodePadding.prototype.level;\n    /**\n     * The indent for each level. Default number 40px from material design menu sub-menu spec.\n     * @type {?}\n     */\n    MatTreeNodePadding.prototype.indent;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tree/outlet.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass MatTreeNodeOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?=} _node\n     */\n    constructor(viewContainer, _node) {\n        this.viewContainer = viewContainer;\n        this._node = _node;\n    }\n}\nMatTreeNodeOutlet.ɵfac = function MatTreeNodeOutlet_Factory(t) { return new (t || MatTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8)); };\nMatTreeNodeOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeOutlet, selectors: [[\"\", \"matTreeNodeOutlet\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: CdkTreeNodeOutlet,\n                useExisting: MatTreeNodeOutlet\n            }])] });\n/** @nocollapse */\nMatTreeNodeOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TREE_NODE_OUTLET_NODE,] }, { type: Optional }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTreeNodeOutlet, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeOutlet]',\n                providers: [{\n                        provide: CdkTreeNodeOutlet,\n                        useExisting: MatTreeNodeOutlet\n                    }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TREE_NODE_OUTLET_NODE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\nif (false) {\n    /** @type {?} */\n    MatTreeNodeOutlet.prototype.viewContainer;\n    /** @type {?} */\n    MatTreeNodeOutlet.prototype._node;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tree/tree.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTable with Material design styles.\n * @template T\n */\nclass MatTree extends CdkTree {\n}\nMatTree.ɵfac = function MatTree_Factory(t) { return ɵMatTree_BaseFactory(t || MatTree); };\nMatTree.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatTree, selectors: [[\"mat-tree\"]], viewQuery: function MatTree_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(MatTreeNodeOutlet, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    } }, hostAttrs: [\"role\", \"tree\", 1, \"mat-tree\"], exportAs: [\"matTree\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTree, useExisting: MatTree }]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"matTreeNodeOutlet\", \"\"]], template: function MatTree_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [MatTreeNodeOutlet], styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;min-height:48px;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"], encapsulation: 2 });\nMatTree.propDecorators = {\n    _nodeOutlet: [{ type: ViewChild, args: [MatTreeNodeOutlet, { static: true },] }]\n};\nconst ɵMatTree_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTree);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTree, [{\n        type: Component,\n        args: [{\n                selector: 'mat-tree',\n                exportAs: 'matTree',\n                template: `<ng-container matTreeNodeOutlet></ng-container>`,\n                host: {\n                    'class': 'mat-tree',\n                    'role': 'tree'\n                },\n                encapsulation: ViewEncapsulation.None,\n                // See note on CdkTree for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                providers: [{ provide: CdkTree, useExisting: MatTree }],\n                styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;min-height:48px;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"]\n            }]\n    }], null, { _nodeOutlet: [{\n            type: ViewChild,\n            args: [MatTreeNodeOutlet, { static: true }]\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatTree.prototype._nodeOutlet;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tree/toggle.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n * @template T\n */\nclass MatTreeNodeToggle extends CdkTreeNodeToggle {\n    constructor() {\n        super(...arguments);\n        this.recursive = false;\n    }\n}\nMatTreeNodeToggle.ɵfac = function MatTreeNodeToggle_Factory(t) { return ɵMatTreeNodeToggle_BaseFactory(t || MatTreeNodeToggle); };\nMatTreeNodeToggle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeToggle, selectors: [[\"\", \"matTreeNodeToggle\", \"\"]], inputs: { recursive: [\"matTreeNodeToggleRecursive\", \"recursive\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTreeNodeToggle.propDecorators = {\n    recursive: [{ type: Input, args: ['matTreeNodeToggleRecursive',] }]\n};\nconst ɵMatTreeNodeToggle_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeToggle);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTreeNodeToggle, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeToggle]',\n                providers: [{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }]\n            }]\n    }], null, { recursive: [{\n            type: Input,\n            args: ['matTreeNodeToggleRecursive']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatTreeNodeToggle.prototype.recursive;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tree/tree-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAT_TREE_DIRECTIVES = [\n    MatNestedTreeNode,\n    MatTreeNodeDef,\n    MatTreeNodePadding,\n    MatTreeNodeToggle,\n    MatTree,\n    MatTreeNode,\n    MatTreeNodeOutlet\n];\nclass MatTreeModule {\n}\nMatTreeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatTreeModule });\nMatTreeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatTreeModule_Factory(t) { return new (t || MatTreeModule)(); }, imports: [[CdkTreeModule, MatCommonModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTreeModule, { declarations: function () { return [MatNestedTreeNode,\n        MatTreeNodeDef,\n        MatTreeNodePadding,\n        MatTreeNodeToggle,\n        MatTree,\n        MatTreeNode,\n        MatTreeNodeOutlet]; }, imports: function () { return [CdkTreeModule, MatCommonModule]; }, exports: function () { return [MatNestedTreeNode,\n        MatTreeNodeDef,\n        MatTreeNodePadding,\n        MatTreeNodeToggle,\n        MatTree,\n        MatTreeNode,\n        MatTreeNodeOutlet]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTreeModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CdkTreeModule, MatCommonModule],\n                exports: MAT_TREE_DIRECTIVES,\n                declarations: MAT_TREE_DIRECTIVES\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tree/data-source/flat-data-source.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n * @template T, F\n */\nclass MatTreeFlattener {\n    /**\n     * @param {?} transformFunction\n     * @param {?} getLevel\n     * @param {?} isExpandable\n     * @param {?} getChildren\n     */\n    constructor(transformFunction, getLevel, isExpandable, getChildren) {\n        this.transformFunction = transformFunction;\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n        this.getChildren = getChildren;\n    }\n    /**\n     * @param {?} node\n     * @param {?} level\n     * @param {?} resultNodes\n     * @param {?} parentMap\n     * @return {?}\n     */\n    _flattenNode(node, level, resultNodes, parentMap) {\n        /** @type {?} */\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n        if (this.isExpandable(flatNode)) {\n            /** @type {?} */\n            const childrenNodes = this.getChildren(node);\n            if (childrenNodes) {\n                if (Array.isArray(childrenNodes)) {\n                    this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n                }\n                else {\n                    childrenNodes.pipe(take(1)).subscribe((/**\n                     * @param {?} children\n                     * @return {?}\n                     */\n                    children => {\n                        this._flattenChildren(children, level, resultNodes, parentMap);\n                    }));\n                }\n            }\n        }\n        return resultNodes;\n    }\n    /**\n     * @param {?} children\n     * @param {?} level\n     * @param {?} resultNodes\n     * @param {?} parentMap\n     * @return {?}\n     */\n    _flattenChildren(children, level, resultNodes, parentMap) {\n        children.forEach((/**\n         * @param {?} child\n         * @param {?} index\n         * @return {?}\n         */\n        (child, index) => {\n            /** @type {?} */\n            let childParentMap = parentMap.slice();\n            childParentMap.push(index != children.length - 1);\n            this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        }));\n    }\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     * @param {?} structuredData\n     * @return {?}\n     */\n    flattenNodes(structuredData) {\n        /** @type {?} */\n        let resultNodes = [];\n        structuredData.forEach((/**\n         * @param {?} node\n         * @return {?}\n         */\n        node => this._flattenNode(node, 0, resultNodes, [])));\n        return resultNodes;\n    }\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     * @param {?} nodes\n     * @param {?} treeControl\n     * @return {?}\n     */\n    expandFlattenedNodes(nodes, treeControl) {\n        /** @type {?} */\n        let results = [];\n        /** @type {?} */\n        let currentExpand = [];\n        currentExpand[0] = true;\n        nodes.forEach((/**\n         * @param {?} node\n         * @return {?}\n         */\n        node => {\n            /** @type {?} */\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n            if (expand) {\n                results.push(node);\n            }\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        }));\n        return results;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatTreeFlattener.prototype.transformFunction;\n    /** @type {?} */\n    MatTreeFlattener.prototype.getLevel;\n    /** @type {?} */\n    MatTreeFlattener.prototype.isExpandable;\n    /** @type {?} */\n    MatTreeFlattener.prototype.getChildren;\n}\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n * @template T, F\n */\nclass MatTreeFlatDataSource extends DataSource {\n    /**\n     * @param {?} _treeControl\n     * @param {?} _treeFlattener\n     * @param {?=} initialData\n     */\n    constructor(_treeControl, _treeFlattener, initialData = []) {\n        super();\n        this._treeControl = _treeControl;\n        this._treeFlattener = _treeFlattener;\n        this._flattenedData = new BehaviorSubject([]);\n        this._expandedData = new BehaviorSubject([]);\n        this._data = new BehaviorSubject(initialData);\n    }\n    /**\n     * @return {?}\n     */\n    get data() { return this._data.value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set data(value) {\n        this._data.next(value);\n        this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n        this._treeControl.dataNodes = this._flattenedData.value;\n    }\n    /**\n     * @param {?} collectionViewer\n     * @return {?}\n     */\n    connect(collectionViewer) {\n        /** @type {?} */\n        const changes = [\n            collectionViewer.viewChange,\n            this._treeControl.expansionModel.changed,\n            this._flattenedData\n        ];\n        return merge(...changes).pipe(map((/**\n         * @return {?}\n         */\n        () => {\n            this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n            return this._expandedData.value;\n        })));\n    }\n    /**\n     * @return {?}\n     */\n    disconnect() {\n        // no op\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatTreeFlatDataSource.prototype._flattenedData;\n    /** @type {?} */\n    MatTreeFlatDataSource.prototype._expandedData;\n    /** @type {?} */\n    MatTreeFlatDataSource.prototype._data;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTreeFlatDataSource.prototype._treeControl;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTreeFlatDataSource.prototype._treeFlattener;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tree/data-source/nested-data-source.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n * @template T\n */\nclass MatTreeNestedDataSource extends DataSource {\n    constructor() {\n        super(...arguments);\n        this._data = new BehaviorSubject([]);\n    }\n    /**\n     * Data for the nested tree\n     * @return {?}\n     */\n    get data() { return this._data.value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set data(value) { this._data.next(value); }\n    /**\n     * @param {?} collectionViewer\n     * @return {?}\n     */\n    connect(collectionViewer) {\n        return merge(...[collectionViewer.viewChange, this._data])\n            .pipe(map((/**\n         * @return {?}\n         */\n        () => {\n            return this.data;\n        })));\n    }\n    /**\n     * @return {?}\n     */\n    disconnect() {\n        // no op\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatTreeNestedDataSource.prototype._data;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tree/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatNestedTreeNode, MatTree, MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule, MatTreeNestedDataSource, MatTreeNode, MatTreeNodeDef, MatTreeNodeOutlet, MatTreeNodePadding, MatTreeNodeToggle };\n\n//# sourceMappingURL=tree.js.map"]}